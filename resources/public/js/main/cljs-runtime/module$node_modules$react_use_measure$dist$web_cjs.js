shadow$provide.module$node_modules$react_use_measure$dist$web_cjs=function(global,require,module,exports){function useOnWindowResize(onWindowResize){react.useEffect(function(){window.addEventListener("resize",onWindowResize);return function(){return void window.removeEventListener("resize",onWindowResize)}},[onWindowResize])}function useOnWindowScroll(onScroll,enabled){react.useEffect(function(){if(enabled)return window.addEventListener("scroll",onScroll,{capture:!0,passive:!0}),function(){return void window.removeEventListener("scroll",
onScroll,!0)}},[onScroll,enabled])}function findScrollContainers(element){var result=[];if(!element||element===document.body)return result;var _window$getComputedSt=window.getComputedStyle(element);[_window$getComputedSt.overflow,_window$getComputedSt.overflowX,_window$getComputedSt.overflowY].some(function(prop){return"auto"===prop||"scroll"===prop})&&result.push(element);return[].concat(result,findScrollContainers(element.parentElement))}var react=require("module$node_modules$react$index"),debounce=
require("module$node_modules$debounce$index"),keys="x y top bottom left right width height".split(" "),areBoundsEqual=function(a,b){return keys.every(function(key){return a[key]===b[key]})};module.exports=function(_temp){function removeListeners(){state.current.scrollContainers&&(state.current.scrollContainers.forEach(function(element){return element.removeEventListener("scroll",scrollChange,!0)}),state.current.scrollContainers=null);state.current.resizeObserver&&(state.current.resizeObserver.disconnect(),
state.current.resizeObserver=null)}function addListeners(){state.current.element&&(state.current.resizeObserver=new ResizeObserver(scrollChange),state.current.resizeObserver.observe(state.current.element),scroll&&state.current.scrollContainers&&state.current.scrollContainers.forEach(function(scrollContainer){return scrollContainer.addEventListener("scroll",scrollChange,{capture:!0,passive:!0})}))}_temp=void 0===_temp?{debounce:0,scroll:!1}:_temp;var debounce$1=_temp.debounce,scroll=_temp.scroll,ResizeObserver=
_temp.polyfill||("undefined"===typeof window?function(){}:window.ResizeObserver);if(!ResizeObserver)throw Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");var _useState=react.useState({left:0,top:0,width:0,height:0,bottom:0,right:0,x:0,y:0});_temp=_useState[0];var set=_useState[1],state=react.useRef({element:null,scrollContainers:null,resizeObserver:null,lastBounds:_temp}),scrollDebounce=debounce$1?
"number"===typeof debounce$1?debounce$1:debounce$1.scroll:null,resizeDebounce=debounce$1?"number"===typeof debounce$1?debounce$1:debounce$1.resize:null,mounted=react.useRef(!1);react.useEffect(function(){mounted.current=!0;return function(){return void(mounted.current=!1)}});debounce$1=react.useMemo(function(){var callback=function(){if(state.current.element){var _ref2=state.current.element.getBoundingClientRect();_ref2={left:_ref2.left,top:_ref2.top,width:_ref2.width,height:_ref2.height,bottom:_ref2.bottom,
right:_ref2.right,x:_ref2.x,y:_ref2.y};Object.freeze(_ref2);mounted.current&&!areBoundsEqual(state.current.lastBounds,_ref2)&&set(state.current.lastBounds=_ref2)}};return[callback,resizeDebounce?debounce.debounce(callback,resizeDebounce):callback,scrollDebounce?debounce.debounce(callback,scrollDebounce):callback]},[set,scrollDebounce,resizeDebounce]);_useState=debounce$1[0];var resizeChange=debounce$1[1],scrollChange=debounce$1[2];useOnWindowScroll(scrollChange,!!scroll);useOnWindowResize(resizeChange);
react.useEffect(function(){removeListeners();addListeners()},[scroll,scrollChange,resizeChange]);react.useEffect(function(){return removeListeners},[]);return[function(node){node&&node!==state.current.element&&(removeListeners(),state.current.element=node,state.current.scrollContainers=findScrollContainers(node),addListeners())},_temp,_useState]}}
//# sourceMappingURL=module$node_modules$react_use_measure$dist$web_cjs.js.map
