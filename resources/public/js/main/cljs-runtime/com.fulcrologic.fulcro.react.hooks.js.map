{"version":3,"sources":["com/fulcrologic/fulcro/react/hooks.cljc"],"mappings":"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","names":["com.fulcrologic.fulcro.react.hooks/useState","initial-value","js/React.useState","com.fulcrologic.fulcro.react.hooks/use-state","cljs.core.into_array","var_args","G__67074","com.fulcrologic.fulcro.react.hooks/useEffect","js/Error","f","js/React.useEffect","js-deps","com.fulcrologic.fulcro.react.hooks/use-context","ctx","js/React.useContext","G__67076","com.fulcrologic.fulcro.react.hooks/use-reducer","reducer","initial-arg","js/React.useReducer","init","G__67078","com.fulcrologic.fulcro.react.hooks/use-callback","cb","js/React.useCallback","args","cljs.core/to-array","G__67080","com.fulcrologic.fulcro.react.hooks/use-memo","js/React.useMemo","G__67082","com.fulcrologic.fulcro.react.hooks/use-ref","js/React.useRef","value","com.fulcrologic.fulcro.react.hooks/use-imperative-handle","ref","js/React.useImperativeHandle","G__67084","com.fulcrologic.fulcro.react.hooks/use-layout-effect","js/React.useLayoutEffect","G__67086","com.fulcrologic.fulcro.react.hooks/use-debug-value","js/React.useDebugValue","formatter","id","com.fulcrologic.fulcro.algorithms.tempid.uuid","com.fulcrologic.fulcro.react.hooks/use-generated-id","com.fulcrologic.fulcro.react.hooks/use-gc","this-or-app","ident","edges","com.fulcrologic.fulcro.react.hooks.useEffect","state","com.fulcrologic.fulcro.components/any->app","cljs.core.swap_BANG_","com.fulcrologic.fulcro.algorithms.normalized-state/remove-entity","initial-mount-state","componentName","cljs.core.keyword","cljs.core.gensym","p__67087","map__67088","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.react.hooks/use-fulcro-mount","parent-this","child-class","initial-state-params","st","pass-through-props","cljs.core.atom","key-and-root","setRoot!","_","join-key","child-factory","com.fulcrologic.fulcro.components.computed_factory","initial-state","G__67089","G__67090","com.fulcrologic.fulcro.components/get-initial-state","or__4223__auto__","cls","com.fulcrologic.fulcro.components/configure-hooks-component!","this","fulcro-props","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_","parent__58509__auto__","app__58510__auto__","com.fulcrologic.fulcro.components/*app*","d__58511__auto__","com.fulcrologic.fulcro.components/*depth*","com.fulcrologic.fulcro.components/depth","s__58512__auto__","com.fulcrologic.fulcro.components.shared","p__58513__auto__","com.fulcrologic.fulcro.components/*parent*","*app*-orig-val__67091","*depth*-orig-val__67092","*shared*-orig-val__67093","com.fulcrologic.fulcro.components/*shared*","*parent*-orig-val__67094","*app*-temp-val__67095","*depth*-temp-val__67096","*shared*-temp-val__67097","*parent*-temp-val__67098","G__67099","G__67100","cljs.core/deref","com.fulcrologic.fulcro.components.get_query","real-factory","com.fulcrologic.fulcro.components.factory","factory","props","cljs.core/reset!","G__67101","G__67102","cljs.core/dissoc","com.fulcrologic.fulcro.react.hooks/pcs","app","component","prior-props-tree-or-ident","edn-query-language.core/ident?","com.fulcrologic.fulcro.components/get-ident","state-map","com.fulcrologic.fulcro.raw.application/current-state","starting-entity","cljs.core.get_in","query","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","com.fulcrologic.fulcro.react.hooks/use-db-lifecycle","current-props-tree","set-state!","vec__67103","cljs.core.nth","cljs.core/random-uuid","exists?","cljs.core/map?","com.fulcrologic.fulcro.algorithms.merge/merge-component!","com.fulcrologic.fulcro.raw.application/add-render-listener!","com.fulcrologic.fulcro.raw.application/remove-render-listener!","p__67106","map__67107","com.fulcrologic.fulcro.react.hooks/use-component","initialize?","initial-params","keep-existing?","options","vec__67108","prior-props-ref","com.fulcrologic.fulcro.react.hooks.use_ref","get-props","com.fulcrologic.fulcro.raw.components/get-traced-props","current-props","set-props!","initial-entity","initial-ident","com.fulcrologic.fulcro.raw.components.get_ident","com.fulcrologic.fulcro.raw.application/maybe-merge-new-component!","initial-props","current-ident","listener-id","cljs.core/hash","p__67111","map__67112","com.fulcrologic.fulcro.react.hooks/use-root","root-key","vec__67113","com.fulcrologic.fulcro.raw.application/get-root-subtree-props","com.fulcrologic.fulcro.raw.application/maybe-merge-new-root!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.raw.application/remove-root!","com.fulcrologic.fulcro.react.hooks/use-uism","state-machine-definition","initial-event-data","vec__67116","uism-data","set-uism-data!","com.fulcrologic.fulcro.ui-state-machines/add-uism!","com.fulcrologic.fulcro.ui-state-machines/remove-uism!"],"sourcesContent":["(ns com.fulcrologic.fulcro.react.hooks\n  \"Simple wrappers for React hooks support, along with additional predefined functions that do useful things\n   with hooks in the context of Fulcro.\"\n  #?(:cljs\n     (:require-macros [com.fulcrologic.fulcro.react.hooks :refer [use-effect use-lifecycle]]))\n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  ;; WARNING TO MAINTAINERS: DO NOT REFERENCE DOM IN HERE. This has to work with native.\n  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  (:require\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    #?@(:cljs\n        [[goog.object :as gobj]\n         cljsjs.react])\n    [com.fulcrologic.fulcro.components :as comp]\n   [com.fulcrologic.fulcro.raw.components :as rc]\n    [com.fulcrologic.fulcro.raw.application :as rapp]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :as mrr]\n    [com.fulcrologic.fulcro.algorithms.normalized-state :as fns]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log])\n  #?(:clj (:import (cljs.tagged_literals JSValue))))\n\n(defn useState\n  \"A simple CLJC wrapper around React/useState. Returns a JS vector for speed. You probably want use-state, which is more\n  convenient.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#usestate\"\n  [initial-value]\n  #?(:cljs (js/React.useState initial-value)))\n\n(defn use-state\n  \"A simple wrapper around React/useState. Returns a cljs vector for easy destructuring.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#usestate\"\n  [initial-value]\n  #?(:cljs (into-array (js/React.useState initial-value))))\n\n(defn useEffect\n  \"A CLJC wrapper around js/React.useEffect that does NO conversion of\n  dependencies. You probably want the macro use-effect instead.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#useeffect\"\n  ([f]\n   #?(:cljs (js/React.useEffect f)))\n  ([f js-deps]\n   #?(:cljs (js/React.useEffect f js-deps))))\n\n#?(:clj\n   (defmacro use-effect\n     \"A simple macro wrapper around React/useEffect that does compile-time conversion of `dependencies` to a js-array\n     for convenience without affecting performance.\n\n      React docs: https://reactjs.org/docs/hooks-reference.html#useeffect\"\n     ([f]\n      `(useEffect ~f))\n     ([f dependencies]\n      (if (enc/compiling-cljs?)\n        (let [deps (cond\n                     (nil? dependencies) nil\n                     (instance? JSValue dependencies) dependencies\n                     :else (JSValue. dependencies))]\n          `(useEffect ~f ~deps))\n        `(useEffect ~f ~dependencies)))))\n\n(defn use-context\n  \"A simple wrapper around React/useContext.\"\n  [ctx]\n  #?(:cljs (js/React.useContext ctx)))\n\n(defn use-reducer\n  \"A simple wrapper around React/useReducer. Returns a cljs vector for easy destructuring\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#usecontext\"\n  ([reducer initial-arg]\n   #?(:cljs (into-array (js/React.useReducer reducer initial-arg))))\n  ([reducer initial-arg init]\n   #?(:cljs (into-array (js/React.useReducer reducer initial-arg init)))))\n\n(defn use-callback\n  \"A simple wrapper around React/useCallback. Converts args to js array before send.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#usecallback\"\n  ([cb]\n   #?(:cljs (js/React.useCallback cb)))\n  ([cb args]\n   #?(:cljs (js/React.useCallback cb (to-array args)))))\n\n(defn use-memo\n  \"A simple wrapper around React/useMemo. Converts args to js array before send.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#usememo\"\n  ([cb]\n   #?(:cljs (js/React.useMemo cb)))\n  ([cb args]\n   #?(:cljs (js/React.useMemo cb (to-array args)))))\n\n(defn use-ref\n  \"A simple wrapper around React/useRef.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#useref\"\n  ([] #?(:cljs (js/React.useRef nil)))\n  ([value] #?(:cljs (js/React.useRef value))))\n\n(defn use-imperative-handle\n  \"A simple wrapper around React/useImperativeHandle.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#useimperativehandle\"\n  [ref f]\n  #?(:cljs (js/React.useImperativeHandle ref f)))\n\n(defn use-layout-effect\n  \"A simple wrapper around React/useLayoutEffect.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#uselayouteffect\"\n  ([f]\n   #?(:cljs (js/React.useLayoutEffect f)))\n  ([f args]\n   #?(:cljs (js/React.useLayoutEffect f (to-array args)))))\n\n(defn use-debug-value\n  \"A simple wrapper around React/useDebugValue.\n\n  React docs: https://reactjs.org/docs/hooks-reference.html#uselayouteffect\"\n  ([value]\n   #?(:cljs (js/React.useDebugValue value)))\n  ([value formatter]\n   #?(:cljs (js/React.useDebugValue value formatter))))\n\n#?(:clj\n   (defmacro use-lifecycle\n     \"A macro shorthand that evaulates to low-level js at compile time for\n     `(use-effect (fn [] (when setup (setup)) (when teardown teardown)) [])`\"\n     ([setup] `(use-lifecycle ~setup nil))\n     ([setup teardown]\n      (cond\n        (and setup teardown) `(use-effect (fn [] (~setup) ~teardown) [])\n        setup `(use-effect (fn [] (~setup) ~(when (enc/compiling-cljs?) 'js/undefined)) [])\n        teardown `(use-effect (fn [] ~teardown) [])))))\n\n(let [id (fn [] (tempid/uuid))]\n  (defn use-generated-id\n    \"Returns a constant ident with a generated ID component.\"\n    []\n    (aget (useState id) 0)))\n\n(defn use-gc\n  \"Effect handler. Creates an effect that will garbage-collect the given ident from fulcro app state on cleanup, and\n  will follow any `edges` (a set of keywords) and remove any things pointed through those keywords as well. See\n  normalized-state's `remove-entity`.\n\n  ```\n  (defsc NewRoot [this props]\n    {:use-hooks? true}\n    (let [generated-id (hooks/use-generated-id)\n          f (use-fulcro-mount this {:child-class SomeChild\n                                    :initial-state-params {:id generated-id})]\n      ;; will garbage-collect the floating root child on unmount\n      (use-gc this [:child/id generated-id] #{})\n      (f props)))\n  ```\n  \"\n  [this-or-app ident edges]\n  (use-lifecycle\n    nil\n    (fn []\n      (let [state (-> this-or-app comp/any->app :com.fulcrologic.fulcro.application/state-atom)]\n        (swap! state fns/remove-entity ident edges)))))\n\n(let [initial-mount-state (fn []\n                            (let [componentName (keyword \"com.fulcrologic.fulcro.floating-root\" (gensym \"generated-root\"))]\n                              #?(:clj [componentName nil] :cljs #js [componentName nil])))]\n  (defn use-fulcro-mount\n    \"\n    Generate a new sub-root that is controlled and rendered by Fulcro's multi-root-renderer.\n\n    ```\n    ;; important, you must use hooks (`defhc` or `:use-hooks? true`)\n    (defsc NewRoot [this props]\n      {:use-hooks? true}\n      (let [f (use-fulcro-mount this {:child-class SomeChild})]\n        ;; parent props will show up in SomeChild as computed props.\n        (f props)))\n    ```\n\n    WARNING: Requires you use multi-root-renderer.\"\n    [parent-this {:keys [child-class\n                         initial-state-params]}]\n    ;; factories are functions, and if you pass a function to setState it will run it, which is NOT what we want...\n    (let [st                 (useState initial-mount-state)\n          pass-through-props (atom {})\n          key-and-root       (aget st 0)\n          setRoot!           (aget st 1)\n          _                  (use-lifecycle\n                               (fn []\n                                 (let [join-key      (aget key-and-root 0)\n                                       child-factory (comp/computed-factory child-class)\n                                       initial-state (comp/get-initial-state child-class (or initial-state-params {}))\n                                       cls           (comp/configure-hooks-component!\n                                                       (fn [this fulcro-props]\n                                                         (use-lifecycle\n                                                           (fn [] (mrr/register-root! this))\n                                                           (fn [] (mrr/deregister-root! this)))\n                                                         (comp/with-parent-context parent-this\n                                                           (child-factory (get fulcro-props join-key initial-state) @pass-through-props)))\n                                                       {:query         (fn [_] [{join-key (comp/get-query child-class)}])\n                                                        :initial-state (fn [_] {join-key initial-state})\n                                                        :componentName join-key})\n                                       real-factory  (comp/factory cls {:keyfn (fn [_] join-key)})\n                                       factory       (fn [props]\n                                                       (reset! pass-through-props props)\n                                                       (real-factory {}))]\n                                   (setRoot! #?(:clj [join-key factory] :cljs #js [join-key factory]))))\n                               (fn []\n                                 (let [join-key (aget key-and-root 0)\n                                       state    (-> parent-this comp/any->app :com.fulcrologic.fulcro.application/state-atom)]\n                                   (swap! state dissoc join-key))))]\n      (aget key-and-root 1))))\n\n(defn- pcs [app component prior-props-tree-or-ident]\n  (let [ident           (if (eql/ident? prior-props-tree-or-ident)\n                          prior-props-tree-or-ident\n                          (comp/get-ident component prior-props-tree-or-ident))\n        state-map       (rapp/current-state app)\n        starting-entity (get-in state-map ident)\n        query           (comp/get-query component state-map)]\n    (fdn/db->tree query starting-entity state-map)))\n\n(defn- use-db-lifecycle [app component current-props-tree set-state!]\n  (let [[id _] (use-state #?(:cljs (random-uuid) :clj (java.util.UUID/randomUUID)))]\n    (use-lifecycle\n      (fn []\n        (let [state-map (rapp/current-state app)\n              ident     (comp/get-ident component current-props-tree)\n              exists?   (map? (get-in state-map ident))]\n          (when-not exists?\n            (merge/merge-component! app component current-props-tree))\n          (rapp/add-render-listener! app id\n            (fn [app _]\n              (let [props (pcs app component ident)]\n                (set-state! props))))))\n      (fn [] (rapp/remove-render-listener! app id)))))\n\n#?(:cljs\n(defn use-component\n  \"Use Fulcro from raw React. This is a Hook effect/state combo that will connect you to the transaction/network/data\n  processing of Fulcro, but will not rely on Fulcro's render. Thus, you can embed the use of the returned props in any\n  stock React context. Technically, you do not have to use Fulcro components for rendering, but they are necessary to define the\n  query/ident/initial-state for startup and normalization.\n\n  The arguments are:\n\n  app - A Fulcro app\n  component - A component with query/ident. Queries MUST have co-located normalization info. You\n              can create this with normal `defsc` or as an anonymous component via `raw.components/nc`.\n  options - A map of options, containing:\n\n      * :initial-params - The parameters to use when getting the initial state of the component. See `comp/get-initial-state`.\n    If no initial state exists on the top-level component, then an empty map will be used. This will mean your props will be\n    empty to start.\n  * initialize? - A boolean (default true). If true then the initial state of the component will be used to pre-populate the component's state\n    in the app database.\n  * :keep-existing? - A boolean. If true, then the state of the component will not be initialized if there\n    is already data at the component's ident (which will be computed using the initial state params provided, if\n    necessary).\n  * :ident - Only needed if you are NOT initializing state, AND the component has a dynamic ident.\n\n  Returns the props from the Fulcro database. The component using this function will automatically refresh after Fulcro\n      transactions run (Fulcro is not a watched-atom system. Updates happen at transaction boundaries). MAY return nil if no data is at that component's ident.\n  \"\n  [app component\n      {:keys [initialize? initial-params keep-existing?]\n       :or   {initial-params {}}\n       :as   options}]\n     (let [prior-props-ref (use-ref nil)\n           get-props       (fn [ident] (rc/get-traced-props (rapp/current-state app) component\n                                                            {:ident       ident\n                                                             :prior-props (.-current prior-props-ref)}))\n           [current-props\n            set-props!]    (use-state\n                            (fn initialize-component-state []\n                              (let [initial-entity (comp/get-initial-state component initial-params)\n                                    initial-ident  (or (:ident options) (rc/get-ident component initial-entity))]\n                                (rapp/maybe-merge-new-component! app component initial-entity options)\n                                (let [initial-props (get-props initial-ident)]\n                                  (set! (.-current prior-props-ref) initial-props)\n                                  initial-props))))\n           current-ident   (or (:ident options) (rc/get-ident component current-props))]\n       (use-effect\n        (fn [] (let [listener-id (random-uuid)]\n                 (rapp/add-render-listener! app listener-id\n                                            (fn [app _]\n                                              (let [props (get-props current-ident)]\n                                                (when-not (identical? (.-current prior-props-ref) props)\n                                                  (set! (.-current prior-props-ref) props)\n                                                  (set-props! props)))))\n                 (fn use-tree-remove-render-listener* [] (rapp/remove-render-listener! app listener-id))))\n        [(hash current-ident)])\n       current-props)))\n\n(defn use-root\n  \"Use a root key and component as a subtree managed by Fulcro. The `root-key` must be a unique\n   (namespace recommended) key among all keys used within the application, since the root of the database is where it\n   will live.\n\n   The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar).\n\n   Returns the props (not including `root-key`) that satisfy the query of `component`. MAY return nil if no data is available.\n  \"\n  [app root-key component {:keys [initialize? keep-existing? initial-params] :as options}]\n  (let [prior-props-ref            (use-ref nil)\n        get-props                  #(rapp/get-root-subtree-props app root-key component (.-current prior-props-ref))\n        [current-props set-props!] (use-state (fn []\n                                                (rapp/maybe-merge-new-root! app root-key component options)\n                                                (let [initial-props (get-props)]\n                                                  (set! (.-current prior-props-ref) initial-props)\n                                                  initial-props)))]\n    (use-lifecycle\n     (fn [] (rapp/add-render-listener! app root-key (fn use-root-render-listener* [app _]\n                                                      (let [props (get-props)]\n                                                        (when-not (identical? (.-current prior-props-ref) props)\n                                                          (log/info \"props updated\" root-key)\n                                                          (set! (.-current prior-props-ref) props)\n                                                          (set-props! props))))))\n      (fn use-tree-remove-render-listener* [] (rapp/remove-root! app root-key)))\n    (get current-props root-key)))\n\n(defn use-uism\n  \"Use a UISM as an effect hook. This will set up the given state machine under the given ID, and start it (if not\n   already started). Your initial state handler MUST set up actors and otherwise initialize based on initial-event-data.\n\n   If the machine is already started at the given ID then this effect will send it an `:event/remounted` event.\n   This hook will send an `:event/unmounted` when the component using this effect goes away. In both cases you may choose\n   to ignore the event.\n\n   You MUST include `:componentName` in each of your actor's normalizing component options (e.g. `(nc query {:componentName ::uniqueName})`)\n   because UISM requires component appear in the component registry (components cannot be safely stored in app state, just their\n   names).\n\n   Returns a map that contains the actor props (by actor name) and the current state of the state machine as `:active-state`.\"\n  [app state-machine-definition id initial-event-data]\n  (let [[uism-data set-uism-data!] (use-state nil)]\n    (use-lifecycle\n      (fn []\n        (uism/add-uism! app {:state-machine-definition state-machine-definition\n                             :id                       id\n                             :receive-props            set-uism-data!\n                             :initial-event-data       initial-event-data}))\n      (fn [] (when-not (:keep-on-unmount initial-event-data)\n               (uism/remove-uism! app id))))\n    uism-data))\n"]}