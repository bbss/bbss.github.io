<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://bbss.github.io' rel='self' type='application/rss+xml'/>
<title>

</title>
<link>
http://bbss.github.io
</link>
<description>
Blog about code, and life in China
</description>
<lastBuildDate>
Wed, 16 Sep 2015 23:55:27 +0800
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://bbss.github.io/posts/2015-09-16-js-meetup-redux-brainstrom-presentation.html
</guid>
<link>
http://bbss.github.io/posts/2015-09-16-js-meetup-redux-brainstrom-presentation.html
</link>
<title>
JS meetup presentation on prototyping with redux
</title>
<description>
&lt;hr/&gt;&lt;h4&gt;&lt;a name=&quot;live&amp;#95;coding&amp;#95;with&amp;#95;&lt;a&amp;#95;href='https://github.com/rackt/redux'&gt;redux&lt;/a&gt;&amp;#95;and&amp;#95;hot&amp;#95;code&amp;#95;swap.&quot;&gt;&lt;/a&gt;Live coding with &lt;a href='https://github.com/rackt/redux'&gt;redux&lt;/a&gt; and hot code swap.&lt;/h4&gt;&lt;hr/&gt;When asked to give a talk a couple days before the JS meetup in Shanghai I decided that saying &quot;maybe next time&quot; for the fourth (fifth?) time would be too lame and that I needed to man up and find the time to prepare.&lt;hr/&gt;&lt;p&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/meetupsh.jpeg&quot; /&gt;&lt;/p&gt;&lt;p&gt;I had long since had the idea of making a brainstorming tool, a way to add a concept and be able to connect it to others.&lt;/p&gt;&lt;p&gt;I also wanted to demonstrate how nice JavaScript is becoming with newly emerging tools and (light) frameworks. The topic &quot;rapid prototyping with short development cycle&quot; was coined. On the mobile SPA overhaul of the data.worldbank.org redux was chosen and it has been great and pretty stable, increasing development speed (and thus joy).&lt;/p&gt;&lt;p&gt;I talked about how the following:&lt;ul&gt;&lt;li&gt;Running through the set-up steps to get a hotloading react/redux project.&lt;/li&gt;&lt;li&gt;Setting up a basic store and reducer function for listening to actions that modify the graph state (a brainstorm perfectly fits a graph!).&lt;/li&gt;&lt;li&gt;Adding actions for adding/removing/merging and moving concepts.&lt;/li&gt;&lt;li&gt;Switching to immutable.js to easily compare current app state vs the wanted state to look like and add React components that visualize these data structures. &lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Added a d3 force directed graph that displays the concepts as bubbles. &lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Ran out of time writing the &lt;a href='https://github.com/bbss/brainstorm-app-redux-prototype/commit/8622a83a7f84be46c88830e632654b974d1141ac#diff-14b1e33d5bf5649597cdc0e4f684daddR46'&gt;recursive-reducing&lt;/a&gt; function that collects the links (edges) between concepts (nodes). &lt;/li&gt;&lt;/ul&gt;I prepared a quick demo of the process and uploaded the slides and different steps to the branches of &lt;a href='https://github.com/bbss/brainstorm-app-redux-prototype'&gt;a github repo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;You can follow along the slides (and switch branches accordingly) if you'd like to get an impression of that the next JavaScript standard will be like with hot code swapping.&lt;/p&gt;&lt;hr/&gt;I'd like to continue developing this app and add things like textareas, selecting bubbles and drag and dropping to merge them. Later also adding collaboration features through time constrained &quot;phases&quot; that allow to vote for merging/expanding/finishing eachothers mindmaps in a democratic way. Brainstorming is usually a group activity after all!&lt;p&gt;Maybe that might be cool to do while learning &lt;a href='https://github.com/Day8/re-frame'&gt;ClojureScripts Re-Frame framework&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>
Wed, 16 Sep 2015 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://bbss.github.io/posts/2015-09-04-choropleth-data-dot.html
</guid>
<link>
http://bbss.github.io/posts/2015-09-04-choropleth-data-dot.html
</link>
<title>
Choropleth dataDot
</title>
<description>
&lt;p&gt;In the data-dot app I am making we need to show map of the world and be able to project all the countries and fill them with a color based on the user selected indicator, also called a choropleth.&lt;/p&gt;&lt;p&gt;After struggling for quite a bit with getting mapbox set-up in my webpack project and have it load TopoJson I end up with a map ready to be choroplethed: &lt;img style=&quot;width: 100%&quot; src=&quot;img/choro-one.png&quot; /&gt;&lt;/p&gt;&lt;p&gt;One of the first problems I run into is that the TopoJson layer used only has the ISO3 code in its features (countries in this case). However the dataset used so far uses the ISO2 codes. In the end we will need to coordinate with the World Bank some more to get additional data on the custom ISO codes they have used for regions but for now I grab a the first legit looking iso2 to iso3 index I can find. I spin up the tool with the best quick feedback for python: lighttable. I open the file with iso codes which I had stored it the scripts directory of the repo.&lt;hr/&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/choro-two.png&quot; /&gt;&lt;hr/&gt;Hmm. Seems that lighttable starts the python executable from a different path then I opened the file in. Lighttable is still lacking a bit in project handling but did properly sense the project root as os.getcwd() shows me.&lt;/p&gt;&lt;hr/&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/choro-three.png&quot; /&gt;&lt;hr/&gt;Succes, but it seems that there is something going on with the spacing on El Salvador, probably not be a problem though as it seems correctly split.&lt;p&gt;The lines are not nicely formatted, usually we can split on a comma but this file seems to use some inconsistent amount of spaces. We can't split on single spaces because that would break countries with spaces, like El Salvador. However we can split on multiple spaces:&lt;hr/&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/choro-four.png&quot; /&gt;&lt;hr/&gt;After removing the empty strings we can grab the iso 2 and iso 3 codes.&lt;hr/&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/choro-five.png&quot; /&gt;&lt;hr/&gt;&lt;/p&gt;&lt;p&gt;We do list comprehension (more pythonic than map and filtering), strip the remaining spaces on the sides and merge all to grab the valid json we want to use in the app:&lt;hr/&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/choro-six.png&quot; /&gt;&lt;hr/&gt;&lt;/p&gt;&lt;p&gt;Now we have a way to know which feature is which country when interacting with mapbox.&lt;/p&gt;&lt;p&gt;Now to get a basic choropleth we use some d3 magic to evenly divide the colors over the domain with the d3.scale.quantile function. The scales that the graph is based on also required the whole domain so we can get that from the stored state.&lt;/p&gt;&lt;p&gt;Redux tries to let all changes to the state of the application pass through the properties of react components by removing the react &quot;this&quot; from the scope. This is to keep the render function as &quot;pure&quot; as possible. Mapbox components themselves are stateful objects though, so when the choropleth layer gets added the old one needs to be removed. Storing the new choropleth layer in the props during the update of the component causes an infinite loop. An easy solution would be to compare the layers before storing it so the infinite loop would stop. However since mapbox layers are not immutable we can't compare them by value. I tried to use a function to greedily turn the objects into immutable objects, but sadly that causes a stack overflow, a little too greedy! After thinking about it for a while I figure that I can just clear the layers every update and re-add the non changing layers. This way I don't cause infinite updates by changing one of the dependencies.&lt;/p&gt;&lt;p&gt;In store we already have the data of some pre-selected location-indicatorType combinations, however for the choropleth we are interested in all the locations so we make a new query to the back-end. The choropleth can -for now- only display one year of data. After some playing around with the onEachFeature property and passing the domain and correct value for the location to the colorscale function we end up with this:&lt;hr/&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/choro-eight.png&quot; /&gt;&lt;hr/&gt;&lt;/p&gt;
</description>
<pubDate>
Fri, 04 Sep 2015 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://bbss.github.io/posts/2015-09-03-blog-epoch.html
</guid>
<link>
http://bbss.github.io/posts/2015-09-03-blog-epoch.html
</link>
<title>
Blog Epoch
</title>
<description>
&lt;hr/&gt;&lt;h4&gt;&lt;a name=&quot;hallo&amp;#95;wereld&quot;&gt;&lt;/a&gt;Hallo wereld&lt;/h4&gt;&lt;hr/&gt;&lt;p&gt;My name is Baruch Berger, I am a code loving guy from The Netherlands currently living in Shanghai.&lt;/p&gt;&lt;p&gt;It seems there are many benefits to writing about what you do so I will start to type out any interesting endevours on my beloved keyboard! I am currently trying to dig myself out of heaps of cool technologies that I want to try. Buried by the many &quot;JavaScript web framework of the season&quot;'s. And languages like JavaScript, Dart, and Python. I have recently seen the sky again and regained interest in immutable FP languages Clojure and ClojureScript. One of the biggest reasons being the focus on a short cycle of coding &lt;-&gt; seeing change, greatly increasing development speed and fun.&lt;hr/&gt;I was first introduced to Clojure in 2013 by Michiel Borkent who was a teacher of mine during my effort to gain the title of Bachelor in Software Engineering.I was by all means still very much a newbie to programming at the time having only experienced a bit of Java and C#. But Clojure left a huge impression asbeing the most reasonable of all options I've since come across and many of its lessons stuck with me and carried over.Therefore I will on this blog besides showing some of my life happenings be talking a lot about all kinds of coding endeavours in those languages. Enjoy!&lt;/p&gt;&lt;hr/&gt;&lt;img style=&quot;width: 100%&quot; src=&quot;img/ShanghaiPuxiToPudong.jpg&quot; /&gt;
</description>
<pubDate>
Thu, 03 Sep 2015 00:00:00 +0800
</pubDate>
</item>
</channel>
</rss>
